#Odoo 15 CE 
version: '3.3'
services:
    odoo:
        container_name: odoo
        image: odoo:15.0
        volumes:
            - ./Odoo15CE/addons-extra:/mnt/extra-addons
            - ./Odoo15CE/etc/odoo:/etc/odoo
            - odoo-web-data:/var/lib/odoo
        ports:
            - "8069:8069"
            - "8000:8000"
        restart: always
        depends_on:
            - postgres
        environment:
            - MONGO_DB_IP=${MONGO_DB_IP}
    postgres:
        image: postgres:14
        environment:
            - POSTGRES_DB=postgres
            - POSTGRES_PASSWORD=odoo
            - POSTGRES_USER=odoo
            - PGDATA=/var/lib/postgresql/data/pgdata
        volumes:
            - odoo-db-data:/var/lib/postgresql/data/pgdata        

#Mongo DB Cluster
# MongoCluster/data/db
    mongo1:
      container_name: mongo1
      image: mongo:4.4
      volumes:
        - mongo-db-1:/data/db
        - ./MongoCluster/rs-init.sh:/scripts/rs-init.sh
      networks:
        - mongors-network
      ports:
        - 192.168.122.1:27021:27017
      links:
        - mongo2
        - mongo3
      restart: always
      entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
    mongo2:
      container_name: mongo2
      image: mongo:4.4
      volumes:
        - mongo-db-2:/data/db
      networks:
        - mongors-network
      ports:
        - 192.168.122.1:27022:27017
      restart: always
      entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
    mongo3:
      container_name: mongo3
      image: mongo:4.4
      volumes:
        - mongo-db-3:/data/db
      networks:
        - mongors-network
      ports:
        - 192.168.122.1:27023:27017
      restart: always
      entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
    ########################
    # Elastic Search Setup #
    ########################
    setup:
      image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
      container_name: ELKSetup
      volumes:
          - /storage/volumes/elastic/certs:/usr/share/elasticsearch/config/certs
      user: "0"
      command: >
          bash -c '
              if [ x${ELASTIC_PASSWORD} == x ]; then
              echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
              exit 1;
              elif [ x${KIBANA_PASSWORD} == x ]; then
              echo "Set the KIBANA_PASSWORD environment variable in the .env file";
              exit 1;
              fi;
              if [ ! -f config/certs/ca.zip ]; then
              echo "Creating CA";
              bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
              unzip config/certs/ca.zip -d config/certs;
              fi;
              if [ ! -f config/certs/certs.zip ]; then
              echo "Creating certs";
              echo -ne \
              "instances:\n"\
              "  - name: es01\n"\
              "    dns:\n"\
              "      - es01\n"\
              "      - localhost\n"\
              "    ip:\n"\
              "      - 127.0.0.1\n"\
              "  - name: es02\n"\
              "    dns:\n"\
              "      - es02\n"\
              "      - localhost\n"\
              "    ip:\n"\
              "      - 127.0.0.1\n"\
              "  - name: es03\n"\
              "    dns:\n"\
              "      - es03\n"\
              "      - localhost\n"\
              "    ip:\n"\
              "      - 127.0.0.1\n"\
              > config/certs/instances.yml;
              bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
              unzip config/certs/certs.zip -d config/certs;
              fi;
              echo "Setting file permissions"
              chown -R root:root config/certs;
              find . -type d -exec chmod 750 \{\} \;;
              find . -type f -exec chmod 640 \{\} \;;
              echo "Waiting for Elasticsearch availability";
              until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
              echo "Setting kibana_system password";
              until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
              echo "All done!";
          '
      healthcheck:
          test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
          interval: 1s
          timeout: 5s
          retries: 120

    ##########################
    # Elastic Search Cluster #
    ##########################
    es01:
        depends_on:
            setup:
                condition: service_healthy
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        container_name: ELK01
        volumes:
            - /storage/volumes/elastic/certs:/usr/share/elasticsearch/config/certs
            - /storage/volumes/elastic/data/node01:/usr/share/elasticsearch/data
        ports:
            - ${ES_PORT}:9200
        environment:
            - node.name=es01
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=es01,es02,es03
            - discovery.seed_hosts=es02,es03
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es01/es01.key
            - xpack.security.http.ssl.certificate=certs/es01/es01.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.http.ssl.verification_mode=certificate
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es01/es01.key
            - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
        mem_limit: ${MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    es02:
        depends_on:
            - es01
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        container_name: ELK02
        volumes:
            - /storage/volumes/elastic/certs:/usr/share/elasticsearch/config/certs
            - /storage/volumes/elastic/data/node02:/usr/share/elasticsearch/data
        environment:
            - node.name=es02
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=es01,es02,es03
            - discovery.seed_hosts=es01,es03
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es02/es02.key
            - xpack.security.http.ssl.certificate=certs/es02/es02.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.http.ssl.verification_mode=certificate
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es02/es02.key
            - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
        mem_limit: ${MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    es03:
        depends_on:
            - es02
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        container_name: ELK03
        volumes:
            - /storage/volumes/elastic/certs:/usr/share/elasticsearch/config/certs
            - /storage/volumes/elastic/data/node03:/usr/share/elasticsearch/data
        environment:
            - node.name=es03
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=es01,es02,es03
            - discovery.seed_hosts=es01,es02
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es03/es03.key
            - xpack.security.http.ssl.certificate=certs/es03/es03.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.http.ssl.verification_mode=certificate
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es03/es03.key
            - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
        mem_limit: ${MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    ####################
    # Kibana Container #
    ####################
    kibana:
      depends_on:
          es01:
              condition: service_healthy
          es02:
              condition: service_healthy
          es03:
              condition: service_healthy
      image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
      container_name: 'Kibana'
      volumes:
          - /storage/volumes/elastic/certs:/usr/share/kibana/config/certs
          - /storage/volumes/kibana/data:/usr/share/kibana/data
      # ports:
      #     - ${KIBANA_PORT}:5601
      environment:
          - SERVERNAME=kibana
          - ELASTICSEARCH_HOSTS=https://es01:9200
          - ELASTICSEARCH_USERNAME=kibana_system
          - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
          - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
          - VIRTUAL_HOST=kibana.dulcesdetallesluna.com
          - LETSENCRYPT_HOST=kibana.dulcesdetallesluna.com
          - LETSENCRYPT_EMAIL=eric.rodriguezco91@gmail.com
      mem_limit: ${MEM_LIMIT}
      healthcheck:
          test:
              [
                  "CMD-SHELL",
                  "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
              ]
          interval: 10s
          timeout: 10s
          retries: 120


networks:
  mongors-network:
    driver: bridge

#Api Mongo

volumes:
    odoo-web-data:
    odoo-db-data:
    mongo-db-1:
    mongo-db-2:
    mongo-db-3:


